import type { Metadata } from 'next'
import type { ReactNode } from 'react'
import type { Locale } from '@/i18n.config'
import { dir } from 'i18next'
import { notFound } from 'next/navigation'
import { ToastContainer } from 'react-toastify'
import { initTranslations } from '@/app/init-translations'
import { Navigation } from '@/app/navigation'
import { auth } from '@/auth'
import { i18nConfig } from '@/i18n.config'
import { APP_DATA } from '@/lib/constants'
import { montserrat, playwrite } from '@/lib/fonts'
import { ThemeProvider, TranslationProvider } from '@/providers'
import '@/app/globals.css'

export interface Props {
  children: ReactNode
  params: Promise<{ locale: Locale }>
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const { locale } = await params
  const authorName = APP_DATA.AUTHOR_NAME
  const appName = APP_DATA.APP_NAME[locale]

  return {
    applicationName: appName,
    title: {
      template: `${appName} | %s`,
      default: `${appName} | ${locale === 'es' ? 'Inicio' : 'Home'}`,
    },
    description: `${appName} ${locale === 'es' ? 'generado por' : 'generated by'} Create Next App`,
    keywords: ['Next.js', 'React', 'Tailwind CSS', 'TypeScript', appName],
    authors: {
      name: authorName,
      url: 'https://github.com/esteban-vm',
    },
    generator: 'Next.js',
    creator: authorName,
    publisher: authorName,
    referrer: 'origin-when-cross-origin',
  }
}

export function generateStaticParams() {
  return i18nConfig.locales.map((locale) => ({ locale }))
}

export default async function RootLayout({ children, params }: Props) {
  const { locale } = await params
  if (!i18nConfig.locales.includes(locale)) notFound()

  const session = await auth()
  const { resources } = await initTranslations(locale)

  return (
    <html dir={dir(locale)} lang={locale} suppressHydrationWarning>
      <body className={`${montserrat.variable} ${playwrite.variable} antialiased`}>
        <ThemeProvider value={{ light: 'corporate', dark: 'sunset' }} disableTransitionOnChange>
          <TranslationProvider locale={locale} resources={resources}>
            <Navigation session={session} />
            {children}
            <ToastContainer position='bottom-center' theme='colored' />
          </TranslationProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}
